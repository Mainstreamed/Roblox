local drawings = {}

--//Services
local Workspace = game:GetService('Workspace')
local Terrain = Workspace:FindFirstChildOfClass('Terrain')
local Players = game:GetService('Players')
local SoundService = game:GetService('SoundService')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')
local HttpService = game:GetService('HttpService')
local Lighting = game:GetService('Lighting')
local NetworkClient = game:GetService('NetworkClient')
local UserGameSettings = UserSettings():GetService('UserGameSettings')
local ContextActionService = game:GetService('ContextActionService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local ReplicatedPlayers = ReplicatedStorage:FindFirstChild('Players')
local CoreGui = game:GetService('CoreGui')
local GuiService = game:GetService('GuiService')

--//Localisation
local drawing_new, instance_new = Drawing.new, Instance.new
local color3_new, color3_fromrgb = Color3.new, Color3.fromRGB
local vector3_new, vector2_new, cframe_new = Vector3.new, Vector2.new, CFrame.new
local math_huge, math_floor, math_ceil, math_max, math_min, math_random, math_tan, math_rad = math.huge, math.floor, math.ceil, math.max, math.min, math.random, math.tan, math.rad
local ray_new = Ray.new

--//Other Variables
local camera = Workspace.CurrentCamera
local local_player = Players.LocalPlayer
local mouse = local_player:GetMouse()
local viewportsize = camera.ViewportSize

local screen_center = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

function drawings:CreateSquare(properties, tables)
    properties = properties or {}
    tables = tables or {}
    if (properties.Visible == nil) then
        properties.Visible = true
    end
    local drawing = drawing_new('Square')
    drawing.Visible = properties.Visible
    drawing.Transparency = properties.Transparency or 1
    drawing.Color = properties.Color or color3_fromrgb(255, 255, 255)
    drawing.Thickness = properties.Thickness or 1
    drawing.Size = properties.Size or vector2_new(100, 100)
    drawing.Position = properties.Position or screen_center
    drawing.Filled = properties.Filled or false
    drawing.ZIndex = properties.ZIndex or 0
    table.insert(drawings, drawing)
    for _, _table in pairs(tables) do
        if typeof(_table) == 'table' then
            table.insert(_table, drawing)
        end
    end
    return drawing
end

function drawings:CreateQuad(properties, tables)
    properties = properties or {}
    tables = tables or {}
    if (properties.Visible == nil) then
        properties.Visible = true
    end
    local drawing = drawing_new('Quad')
    drawing.Visible = properties.Visible
    drawing.Transparency = properties.Transparency or 1
    drawing.Color = properties.Color or color3_fromrgb(255, 255, 255)
    drawing.Thickness = properties.Thickness or 1
    drawing.Filled = properties.Filled or false
    drawing.PointA = properties.PointA or screen_center
    drawing.PointB = properties.PointB or screen_center
    drawing.PointC = properties.PointC or screen_center
    drawing.PointD = properties.PointD or screen_center
    drawing.ZIndex = properties.ZIndex or 0
    table.insert(drawings, drawing)
    for _, _table in pairs(tables) do
        if typeof(_table) == 'table' then
            table.insert(_table, drawing)
        end
    end
    return drawing
end

function drawings:CreateText(properties, tables)
    properties = properties or {}
    tables = tables or {}
    if (properties.Visible == nil) then
        properties.Visible = true
    end
    local drawing = drawing_new('Text')
    drawing.Visible = properties.Visible
    drawing.Transparency = properties.Transparency or 1
    drawing.Color = properties.Color or color3_fromrgb(255, 255, 255)
    drawing.Font = properties.Font or 2
    drawing.Position = properties.Position or screen_center
    drawing.OutlineColor = properties.OutlineColor or color3_fromrgb(1, 1, 1)
    drawing.Outline = properties.Outline or true
    drawing.Center = properties.Center or false
    drawing.Size = properties.Size or 13
    drawing.Text = properties.Text or 'sample text'
    drawing.ZIndex = properties.ZIndex or 0
    table.insert(drawings, drawing)
    for _, _table in pairs(tables) do
        if typeof(_table) == 'table' then
            table.insert(_table, drawing)
        end
    end
    return drawing
end

function drawings:CreateCircle(properties, tables)
    properties = properties or {}
    tables = tables or {}
    if (properties.Visible == nil) then
        properties.Visible = true
    end
    local drawing = drawing_new('Circle')
    drawing.Visible = properties.Visible
    drawing.Transparency = properties.Transparency or 1
    drawing.Color = properties.Color or color3_fromrgb(255, 255, 255)
    drawing.Thickness = properties.Thickness or 1
    drawing.NumSides = properties.NumSides or 100
    drawing.Radius = properties.Radius or 150
    drawing.Filled = properties.Filled or false
    drawing.Position = properties.Position or screen_center
    drawing.ZIndex = properties.ZIndex or 0
    table.insert(drawings, drawing)
    for _, _table in pairs(tables) do
        if typeof(_table) == 'table' then
            table.insert(_table, drawing)
        end
    end
    return drawing
end

function drawings:CreateLine(properties, tables)
    properties = properties or {}
    tables = tables or {}
    if (properties.Visible == nil) then
        properties.Visible = true
    end
    local drawing = drawing_new('Line')
    drawing.Visible = properties.Visible
    drawing.Transparency = properties.Transparency or 1
    drawing.Color = properties.Color or color3_fromrgb(255, 255, 255)
    drawing.Thickness = properties.Thickness or 1
    drawing.From = properties.From or screen_center
    drawing.To = properties.To or screen_center
    drawing.ZIndex = properties.ZIndex or 0
    table.insert(drawings, drawing)
    for _, _table in pairs(tables) do
        if typeof(_table) == 'table' then
            table.insert(_table, drawing)
        end
    end
    return drawing
end

function drawings:CreateTriangle(properties, tables)
    properties = properties or {}
    tables = tables or {}
    if (properties.Visible == nil) then
        properties.Visible = true
    end
    local drawing = drawing_new('Triangle')
    drawing.Visible = properties.Visible
    drawing.Transparency = properties.Transparency or 1
    drawing.Color = properties.Color or color3_fromrgb(255, 255, 255)
    drawing.Thickness = properties.Thickness or 1
    drawing.PointA = properties.PointA or screen_center
    drawing.PointB = properties.PointB or screen_center
    drawing.PointC = properties.PointC or screen_center
    drawing.Filled = properties.Filled or false
    drawing.ZIndex = properties.ZIndex or 0
    table.insert(drawings, drawing)
    for _, _table in pairs(tables) do
        if typeof(_table) == 'table' then
            table.insert(_table, drawing)
        end
    end
    return drawing
end

function drawings:CreateImage(properties)
    properties = properties or {}
    tables = tables or {}
    if (properties.Visible == nil) then
        properties.Visible = true
    end
    local drawing = drawing_new('Image')
    drawing.Visible = properties.Visible
    drawing.Transparency = properties.Transparency or 1
    drawing.Data = properties.Data or ''
    drawing.Size = properties.Size or vector2_new(10, 10)
    drawing.Position = properties.Position or screen_center
    drawing.Rounding = properties.Rounding or 1

    table.insert(drawings, drawing)
    for _, _table in pairs(tables) do
        if typeof(_table) == 'table' then
            table.insert(_table, drawing)
        end
    end
    return drawing
end

return drawings
